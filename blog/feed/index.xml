<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" version="2.0">
  <channel>
    <title>Tom Dalling</title>
    <link>https://www.tomdalling.com/?utm_source=rss&amp;utm_medium=rss</link>
    <atom:link href="https://www.tomdalling.com/blog/feed/" rel="self" type="application/rss+xml"/>
    <description>Web &amp; software developer</description>
    <language>en</language>
    <generator>Tom Dalling's fingertips</generator>
    <sy:updatePeriod>daily</sy:updatePeriod>
    <sy:updateFrequency>1</sy:updateFrequency>
    <item>
      <title>Against Must-Haves (Part Three)</title>
      <link>https://www.tomdalling.com/blog/software-processes/against-must-haves-part-three/?utm_source=rss&amp;utm_medium=rss</link>
      <description><![CDATA[<p>In this, the third and final part of this series, I’m going to present some
recommendations for avoiding the pitfalls covered in the previous two parts.</p>
]]></description>
      <pubDate>Sat, 22 Feb 2025 00:00:00 -0000</pubDate>
      <category><![CDATA[Software Processes]]></category>
      <guid isPermaLink="false">com.tomdalling.blog.against-must-haves-part-three</guid>
    </item>
    <item>
      <title>High Performance Requires Process</title>
      <link>https://www.tomdalling.com/blog/software-processes/high-performance-requires-process/?utm_source=rss&amp;utm_medium=rss</link>
      <description><![CDATA[<p>Processes are a prerequisite for high-performance in software engineering teams
due to their ability to amplify the skill of the team. I believe there exists no
team, given that there is little to no process to begin with, whose performance
could not be improved by adding appropriate process.</p>
]]></description>
      <pubDate>Sun, 03 Mar 2024 00:00:00 -0000</pubDate>
      <category><![CDATA[Software Processes]]></category>
      <guid isPermaLink="false">com.tomdalling.blog.high-performance-requires-process</guid>
    </item>
    <item>
      <title>Ditch The Umbrella And Grab Some Sunnies</title>
      <link>https://www.tomdalling.com/blog/software-processes/ditch-the-umbrella-and-grab-some-sunnies/?utm_source=rss&amp;utm_medium=rss</link>
      <description><![CDATA[<p>Engineering Managers (EMs) are sometimes said to be “shit umbrellas”. They are
supposed to keep all the distractions away from the team: the short-lived whims
and fancies of various stakeholders, vague plans that are going to change
several times before being solidified — all that stuff. Distractions are
poisonous to good software, so hiding them should help the team deliver more and
better software. A large part of this is true.</p>

<p>However, I would like to argue here that behaving like an umbrella is probably
not a good thing. Umbrellas are shields that block rain. And what are these EMs
blocking? Hopefully distractions, but also <em>information</em> and <em>reality</em>.</p>
]]></description>
      <pubDate>Mon, 22 Jan 2024 00:00:00 -0000</pubDate>
      <category><![CDATA[Software Processes]]></category>
      <guid isPermaLink="false">com.tomdalling.blog.ditch-the-umbrella-and-grab-some-sunnies</guid>
    </item>
    <item>
      <title>Nugs And Negative Failure Demand</title>
      <link>https://www.tomdalling.com/blog/software-processes/nugs-and-negative-failure-demand/?utm_source=rss&amp;utm_medium=rss</link>
      <description><![CDATA[<p>In this article I’m going to take a look at software quality as a way to
differentiate between junior, mid-level, and senior software engineers, through
the lens of <em>failure demand</em>, purely so that I can introduce a new concept that
I thought up on a walk today, which I’m calling <em>negative failure demand</em>.</p>
]]></description>
      <pubDate>Sun, 03 Sep 2023 00:00:00 -0000</pubDate>
      <category><![CDATA[Software Processes]]></category>
      <guid isPermaLink="false">com.tomdalling.blog.nugs-and-negative-failure-demand</guid>
    </item>
    <item>
      <title>Against Must-Haves (Part Two)</title>
      <link>https://www.tomdalling.com/blog/software-processes/against-must-haves-part-two/?utm_source=rss&amp;utm_medium=rss</link>
      <description><![CDATA[<p>In part two of this series, we’re going to look at how the must-have priority
bucket leads engineering to make bad decisions.</p>
]]></description>
      <pubDate>Sat, 08 Apr 2023 00:00:00 -0000</pubDate>
      <category><![CDATA[Software Processes]]></category>
      <guid isPermaLink="false">com.tomdalling.blog.against-must-haves-part-two</guid>
    </item>
    <item>
      <title>Against Must-Haves (Part One)</title>
      <link>https://www.tomdalling.com/blog/software-processes/against-must-haves-part-one/?utm_source=rss&amp;utm_medium=rss</link>
      <description><![CDATA[<p>Categorising requirements into buckets like “must-haves” and “nice-to-haves” is
a common approach to prioritisation in software projects. In my opinion, this is
a bad way to priortise work, for reasons which become clear when you look at the
incentives it produces.</p>
]]></description>
      <pubDate>Sat, 01 Apr 2023 00:00:00 -0000</pubDate>
      <category><![CDATA[Software Processes]]></category>
      <guid isPermaLink="false">com.tomdalling.blog.against-must-haves-part-one</guid>
    </item>
    <item>
      <title>Agile Is A Glass Cannon</title>
      <link>https://www.tomdalling.com/blog/software-processes/agile-is-a-glass-cannon/?utm_source=rss&amp;utm_medium=rss</link>
      <description><![CDATA[<p>A recent shower thought of mine is that agile software development
might be similar to the strategic concept of a <a href="https://en.wiktionary.org/wiki/glass_cannon"><em>glass
cannon</em></a> in gaming —
specifically, that it’s a high-risk high-reward strategy where the risk can be
mitigated by skill/experience.</p>
]]></description>
      <pubDate>Sat, 25 Mar 2023 00:00:00 -0000</pubDate>
      <category><![CDATA[Software Processes]]></category>
      <guid isPermaLink="false">com.tomdalling.blog.agile-is-a-glass-cannon</guid>
    </item>
    <item>
      <title>Marketing Yourself As A Junior Engineer</title>
      <link>https://www.tomdalling.com/blog/mentoring/marketing-yourself-as-a-junior-engineer/?utm_source=rss&amp;utm_medium=rss</link>
      <description><![CDATA[<blockquote>
  <p>If you know the enemy and know yourself, you need not fear the result
of a hundred battles. If you know yourself but not the enemy, for
every victory gained you will also suffer a defeat. If you know
neither the enemy nor yourself, you will succumb in every battle.</p>

  <p>— Sun Tzu, <em>The Art of War</em></p>
</blockquote>

<p>Applying for a junior engineering position, or any job, is an exercise
in marketing and sales. You are the product, and the employer is a
potential customer. To market and sell anything effectively, you need
to understand how the customer thinks.</p>

<p>In this article, I want to explore a bit of employer psychology when
it comes to hiring juniors, and give some suggestions that I
believe increase your chance of success.</p>
]]></description>
      <pubDate>Sun, 05 Feb 2023 00:00:00 -0000</pubDate>
      <category><![CDATA[Mentoring Notes]]></category>
      <guid isPermaLink="false">com.tomdalling.blog.marketing-yourself-as-a-junior-engineer</guid>
    </item>
    <item>
      <title>Context, Costs, and Benefits</title>
      <link>https://www.tomdalling.com/blog/random-stuff/context-costs-and-benefits/?utm_source=rss&amp;utm_medium=rss</link>
      <description><![CDATA[<p>When is “measure twice, cut once” bad advice?</p>

<p>One of my hobbies is complaining about the tendency of software developers to view choices as binary, moralistic decisions.
Measuring twice is obviously correct, and anyone who doesn’t do it is an unprofessional, evil wood waster.
Either that or double measurers are a bunch of know-nothing shysters selling snake oil for exorbitant consulting fees.
This black-and-white thinking is a mental shortcut that many animals take,
but sometimes it’s nice to apply a little more intellectual rigour than a Pomeranian.</p>

<p>I’d like us to think less in terms of <em>right</em> and <em>wrong</em> when it comes to technical decisions,
and think more in terms of <em>context</em>, <em>costs</em> and <em>benefits</em>.</p>
]]></description>
      <pubDate>Wed, 20 Jul 2022 00:00:00 -0000</pubDate>
      <category><![CDATA[Miscellaneous]]></category>
      <guid isPermaLink="false">com.tomdalling.blog.context-costs-and-benefits</guid>
    </item>
    <item>
      <title>Thoughts On Schema Library Design</title>
      <link>https://www.tomdalling.com/blog/software-design/thoughts-on-schema-library-design/?utm_source=rss&amp;utm_medium=rss</link>
      <description><![CDATA[<p>It’s that time of year again. It seems like about once a year I get
interested designing a schema library. This post is a collection of my
latest ideas and design goals, mostly based on what I’ve learnt from
the previous three or four implementations.</p>

<p>This topic is probably interesting to a tiny subset of developers, and
super boring to everyone else. I’ve tried to write this post in a way
that is accessible to a wider developer audience, but you have been
warned!</p>

<p>
]]></description>
      <pubDate>Sat, 03 Jul 2021 00:00:00 -0000</pubDate>
      <category><![CDATA[Software Design]]></category>
      <guid isPermaLink="false">com.tomdalling.blog.thoughts-on-schema-library-design</guid>
    </item>
  </channel>
</rss>
